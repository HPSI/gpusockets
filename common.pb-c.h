/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: common.proto */

#ifndef PROTOBUF_C_common_2eproto__INCLUDED
#define PROTOBUF_C_common_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1000000 < PROTOBUF_C_VERSION_NUMBER
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Cmd Cmd;
typedef struct _Cookie Cookie;


/* --- enums --- */


/* --- messages --- */

struct  _Cmd
{
  ProtobufCMessage base;
  uint32_t type;
  uint32_t arg_count;
  size_t n_int_args;
  int32_t *int_args;
  size_t n_str_args;
  char **str_args;
  protobuf_c_boolean has_extra_args;
  ProtobufCBinaryData extra_args;
};
#define CMD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmd__descriptor) \
    , 0, 0, 0,NULL, 0,NULL, 0,{0,NULL} }


struct  _Cookie
{
  ProtobufCMessage base;
  uint32_t type;
  Cmd *payload;
};
#define COOKIE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cookie__descriptor) \
    , 0, NULL }


/* Cmd methods */
void   cmd__init
                     (Cmd         *message);
size_t cmd__get_packed_size
                     (const Cmd   *message);
size_t cmd__pack
                     (const Cmd   *message,
                      uint8_t             *out);
size_t cmd__pack_to_buffer
                     (const Cmd   *message,
                      ProtobufCBuffer     *buffer);
Cmd *
       cmd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmd__free_unpacked
                     (Cmd *message,
                      ProtobufCAllocator *allocator);
/* Cookie methods */
void   cookie__init
                     (Cookie         *message);
size_t cookie__get_packed_size
                     (const Cookie   *message);
size_t cookie__pack
                     (const Cookie   *message,
                      uint8_t             *out);
size_t cookie__pack_to_buffer
                     (const Cookie   *message,
                      ProtobufCBuffer     *buffer);
Cookie *
       cookie__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cookie__free_unpacked
                     (Cookie *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cmd_Closure)
                 (const Cmd *message,
                  void *closure_data);
typedef void (*Cookie_Closure)
                 (const Cookie *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cmd__descriptor;
extern const ProtobufCMessageDescriptor cookie__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_common_2eproto__INCLUDED */
