/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: common.proto */

#ifndef PROTOBUF_C_common_2eproto__INCLUDED
#define PROTOBUF_C_common_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1000000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _CudaCmd CudaCmd;
typedef struct _CudaDevice CudaDevice;
typedef struct _CudaDeviceList CudaDeviceList;
typedef struct _Cookie Cookie;


/* --- enums --- */


/* --- messages --- */

struct  _CudaCmd
{
  ProtobufCMessage base;
  uint32_t type;
  uint32_t arg_count;
  size_t n_int_args;
  int32_t *int_args;
  size_t n_uint_args;
  uint32_t *uint_args;
  size_t n_str_args;
  char **str_args;
  size_t n_extra_args;
  ProtobufCBinaryData *extra_args;
};
#define CUDA_CMD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuda_cmd__descriptor) \
    , 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _CudaDevice
{
  ProtobufCMessage base;
  char *name;
  protobuf_c_boolean is_busy;
};
#define CUDA_DEVICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuda_device__descriptor) \
    , NULL, 0 }


struct  _CudaDeviceList
{
  ProtobufCMessage base;
  uint32_t devices_free;
  size_t n_device;
  CudaDevice **device;
};
#define CUDA_DEVICE_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cuda_device_list__descriptor) \
    , 0, 0,NULL }


struct  _Cookie
{
  ProtobufCMessage base;
  uint32_t type;
  protobuf_c_boolean has_cuda_error;
  uint32_t cuda_error;
  CudaCmd *cuda_cmd;
  CudaDeviceList *cuda_devices;
};
#define COOKIE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cookie__descriptor) \
    , 0, 0,0, NULL, NULL }


/* CudaCmd methods */
void   cuda_cmd__init
                     (CudaCmd         *message);
size_t cuda_cmd__get_packed_size
                     (const CudaCmd   *message);
size_t cuda_cmd__pack
                     (const CudaCmd   *message,
                      uint8_t             *out);
size_t cuda_cmd__pack_to_buffer
                     (const CudaCmd   *message,
                      ProtobufCBuffer     *buffer);
CudaCmd *
       cuda_cmd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuda_cmd__free_unpacked
                     (CudaCmd *message,
                      ProtobufCAllocator *allocator);
/* CudaDevice methods */
void   cuda_device__init
                     (CudaDevice         *message);
size_t cuda_device__get_packed_size
                     (const CudaDevice   *message);
size_t cuda_device__pack
                     (const CudaDevice   *message,
                      uint8_t             *out);
size_t cuda_device__pack_to_buffer
                     (const CudaDevice   *message,
                      ProtobufCBuffer     *buffer);
CudaDevice *
       cuda_device__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuda_device__free_unpacked
                     (CudaDevice *message,
                      ProtobufCAllocator *allocator);
/* CudaDeviceList methods */
void   cuda_device_list__init
                     (CudaDeviceList         *message);
size_t cuda_device_list__get_packed_size
                     (const CudaDeviceList   *message);
size_t cuda_device_list__pack
                     (const CudaDeviceList   *message,
                      uint8_t             *out);
size_t cuda_device_list__pack_to_buffer
                     (const CudaDeviceList   *message,
                      ProtobufCBuffer     *buffer);
CudaDeviceList *
       cuda_device_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cuda_device_list__free_unpacked
                     (CudaDeviceList *message,
                      ProtobufCAllocator *allocator);
/* Cookie methods */
void   cookie__init
                     (Cookie         *message);
size_t cookie__get_packed_size
                     (const Cookie   *message);
size_t cookie__pack
                     (const Cookie   *message,
                      uint8_t             *out);
size_t cookie__pack_to_buffer
                     (const Cookie   *message,
                      ProtobufCBuffer     *buffer);
Cookie *
       cookie__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cookie__free_unpacked
                     (Cookie *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CudaCmd_Closure)
                 (const CudaCmd *message,
                  void *closure_data);
typedef void (*CudaDevice_Closure)
                 (const CudaDevice *message,
                  void *closure_data);
typedef void (*CudaDeviceList_Closure)
                 (const CudaDeviceList *message,
                  void *closure_data);
typedef void (*Cookie_Closure)
                 (const Cookie *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cuda_cmd__descriptor;
extern const ProtobufCMessageDescriptor cuda_device__descriptor;
extern const ProtobufCMessageDescriptor cuda_device_list__descriptor;
extern const ProtobufCMessageDescriptor cookie__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_common_2eproto__INCLUDED */
